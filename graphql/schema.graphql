type User {
  id: ID!
  name: String!
  email: String!
  articles: [Article!]! @hasMany
}

type Article {
  id: ID!
  title: String!
  content: String! 
  user: User! @belongsTo 
} 

type Query {
  user(id: ID! @eq): User @first
  users: [User!]! @paginate

  article(id: ID! @eq): Article @first
  articles: [Article!]! @paginate

  me: User @auth(guard: "api")
} 

type Mutation {
  createUser(
    name: String! @rules(apply: ["required"])
    email: String! @rules(apply: ["required", "email", "unique:users"])
    password: String! @rules(apply: ["required", "min:6"]) @bcrypt
  ): User @create

  login(
    email: String! @rules(apply: ["required", "email"])
    password: String! @rules(apply: ["required", "min:6"])
  ): String @field(resolver: "App\\GraphQL\\Mutations\\AuthMutator") 

  createArticle(
    title: String! @rules(apply: ["required"])
    content: String! @rules(apply: ["required"])
  ): Article @field(resolver: "App\\GraphQL\\Mutations\\ArticleMutator") @middleware(checks: ["auth:api"])
}